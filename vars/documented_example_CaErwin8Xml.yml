---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

ibm_infosvr_metadata_asset_mgr_import_areas:

############### ERwin 8 Data Modeler (File) ###############
# The erwin 8 Data Modeler bridge imports logical data models and physical data models from files that are produced by erwin Data Modeler, version 8.
# 
# This bridge imports files in either erwin or XML format. The bridge parses the XML files natively, but requires the erwin Data Modeler COM/OLE API to parse ERWIN files.
# 
# When you import a physical data model, you have the option on the Identity Parameters screen to create a database schema that implements the physical data model. Both the schema and the physical data model are stored in the metadata repository.
# Prerequisites
# 
# To import ERWIN files, you must install erwin Data Modeler 8 on the same computer that the bridge is installed on. The file that you want to import must exist on the same computer.
# 
# To import XML files, ensure that erwin Data Modeler was installed with the option to save XML files in the Repository Format. To create an XML file for import, open the ERWIN file in erwin 8 and save it as an XML Repository file.
# Frequently asked questions
# 
# Which erwin version does this bridge support?
#     The bridge supports the XML file version that is generated by erwin 8.0 build 2178 and later versions. 
# How does the bridge import the order of entity attributes?
# 
#     The bridge imports the physical column order if the information is present in the XML file. Otherwise, the bridge maintains the order of entity attributes.
#     The order of attributes might not be the same after you use the bridge to import the file. To view the order of attributes in erwin 8, take the following steps:
# 
#         Switch to the model Physical View.
#         From the Diagram menu, select Diagrams.
#         Select the Table tab.
#         From the Physical Display Level pull-down, select Physical Order.
# 
#     To import the logical order, derive a logical-only model in erwin and import it.
# 
# Troubleshooting
# 
# The following section describes troubleshooting procedures.
# 
# Missing physical names in XML files
# 
#     When you save a logical and physical model, the physical names of tables, columns, and keys might not always be saved into the XML file. When you use erwin to manage the automatic generation of physical names from logical names, only the generation rules are saved. Missing physical names are not an issue for physical-only erwin models or when you import ERWIN files
#     There are several ways to work around this issue:
# 
#         Save the XML file in Repository format.
#         Explicitly set all physical names so that you do not rely on generation rules to create them from the logical names.
#         Derive a new physical model from your existing logical and physical model. Use the Derive New Model option on the Tools menu in erwin 8. The generation rules are invoked to produce all the physical names. Save the new physical model as XML. The logical names of tables are also available in this new XML file, but the logical names of attributes might still be missing.
# 
# Alert windows cause import to hang
#     When you import ERWIN files, erwin might display a window that is unavailable for the bridge to respond to. Such windows cause the bridge to hang during import. The workaround is to modify the registry to prevent such windows from being displayed:
# 
#         Use Regedit.exe to edit the registry on the computer where the bridge is running.
#         Find the registry key HKEY_CURRENT_USER\Software\CA\erwin Data Modeler\8.2\Messages.
#         Add GDM-46=1; to the value of Message Status.
  - 
    name: FULL_CaErwin8Xml_ImportArea
    type: CaErwin8Xml
    description: "A full sample (all options) for an ERwin 8 Data Modeler (File) import area"
    metadata_interchange_server: "client.is-server.ibm.com"
    # Required. Specify the XML file or ERWIN file to import. To import ERWIN files you must install erwin Data Modeler 8 on the same computer that the bridge is installed on.
    model_file: "C:\\somewhere\\something.xml"
    # SEMI-SUPPORTED: A UDP is usually defined with a property definition object that has a default value. Objects that the property applies to might also specify an explicit value for this property. The objects might specify no value at all, in which case the default value of the property definition applies. supports importing UDPs only by appending the property name and value to the description property of the object. To append the property name and value, even if implicit, to the description property of an object, select In description, migrate default values. If you select any other value for this parameter, the UDP information is not imported.
    import_user_defined_properties: "In description, migrate default values" # UNSUPPORTED: "As metadata" or "As metadata, migrate default values" or "Both, migrate default values"
    # handles the import of relationship names in the following way:
    # For imports from physical models, relationship names are imported from the constraint name of the foreign key.
    # For imports from logical/physical models there are the following options:
    #    If Use relationship name is selected, relationship names are imported from the name property. This is the default behavior.
    #    If Use derived name is selected, relationship names are imported from the relationship properties.
    # To use relationship names in jobs, ensure that the names do not contain spaces. 
    import_relationship_names: "From relationship name"       # or "From derived name"
    # Specify how to import the position of columns in tables. If you select the default Physical order, the columns are imported in the order in the database, as generated in SQL DDL. If you select Column order, the columns use the order of the erwin physical view. You can view the physical order in erwin when you edit the stored display settings of the subject area.
    column_order: "Physical order"                            # or "Column order"
    # Specifies if parent schemas for tables and views are imported. Accept the default value, True. relies on the identity of the parent schemas to create the identity of tables and other assets. 
    import_parent_schemas: True
    # UNSUPPORTED? Select None. InfoSphere Information Server does not support import of diagrams.
    import_diagrams: None                                     # or "All" or "Current view"
    # UNSUPPORTED? Do not select. Accept the default value, which is to not move logical entities to subject areas.
    move_logical_entities_to_subject_areas: False
    # Optional. Enter one or more of the following options with values.
    # -v  -- Set one or more environment variables. Surround the value with double quotation marks (") if the value contains spaces. For example, -v var1=value -v var2="a value with spaces".
    # -m  -- Specify the maximum Java memory size. Use a whole number. For example, -m 4G or -m 2500M.
    # -j  -- Specify the last option that is followed by Java command line options. For example, -j -Dname=value -Xms1G. 
    misc_opts: ""
    # For imports of physical data models, select this option to add the owner name to the table name, in the form owner_name.table_name. The owner name is added only for those tables where an owner name is specified in the source file.
    # Select this option if the design tool allows you to create tables with the same name in the same model. Otherwise, the tables with the same name are created as duplicate design tables when they are imported into the metadata repository.
    qualify_table_names: False
    # Perform a consistency check on the selected metadata before it is imported into the metadata repository. It is possible to save metadata in source tools in ways that cause problems when the assets are imported into the metadata repository or used in other tools. For example, a foreign key might have no connection to a primary key or to an alternate key. In some cases, the metadata might be so semantically inconsistent that the bridge cannot import it.
    # The metadata consistency check returns warnings and errors in the log file.
    # 'basic'
    #     The default. Performs the minimum consistency checks necessary to validate the metadata, including checking for missing relationships and foreign keys that are not connected to primary or alternate keys.
    #     In some cases, the basic check might be more rigorous than necessary and you can ignore certain errors or warnings.
    # 'detailed'
    #     Performs the basic check plus more advanced semantic checks specific to the type of metadata that is imported. This level can be used when the source tool cannot validate the metadata. 
    # 'none'
    #     Use with extreme caution. Selecting this option might result in the import of duplicates or invalid identities and might cause serious problems with your use of suite tools and the metadata repository.
    metadata_consistency_check: "basic"             # or "detailed" or "none"
    # Specify what action to take if an imported asset matches an existing asset in the metadata repository. You can keep the existing description, or overwrite the existing description with the description of the imported asset. If either description is null, the non-null description is used, regardless of which option you specify. The default behavior is to replace the existing description.
    existing_asset: Replace_existing_description    # or "Keep_existing_description"
    # Required. Specify a unique value that can help identify the model. This value is combined with the name of the data model to set the identity of the data model. Specifying a unique value for this parameter is important when you might import different logical or physical data models that have the same name.
    # If you are importing logical and physical data models at the same time, the value that you specify is used for each of them.
    # Important: In imports created by using this bridge in version 8.7 of InfoSphere Information Server, the identity of an imported logical or physical data model includes a namespace value that contains the path of the model file. If you imported the same data model with version 8.7, take either of the following actions:
    #    To merge the current data model with the previously imported data model, use the same value for Model namespace that was provided for you in the original import. You can copy this namespace value by browsing to the previously imported logical or physical data model and displaying the model on the Repository Management tab.
    #    To create a different identity for the current data model, specify a value for Model namespace that is different from the namespace value of the previously imported data model. The current data model is imported as a unique asset, while the previously imported model remains in the metadata repository. If desired, a Common Metadata Administrator can delete the previously imported data model on the Repository Management tab.
    model_namespace: "SAMPLE"
    # Select to create a database schema and database tables from the physical data model. Both the physical data model and the database schema are stored in the metadata repository on import. After you select this option, specify the host name, database name, and DBMS name in the identity parameters to create a valid identity for the database schema.
    create_schema_from_pdm: False
    # Type the name of the computer or browse the metadata repository to select the computer that hosts or will host the database, data file, or data file folder. This value is important for creating and reconciling the identity of the asset in the repository.
    # You can specify a different name than the name of the source computer. For example, you might specify the computer that will host this database during development or production.
    # Required: if 'create_schema_from_pdm' is True
    hostname: ""
    # Type the name of the database or browse to select the database that will contain the imported tables. This value is important for creating and reconciling the identity of the database in the repository.
    # You can specify a different name than the name of the source database. For example, you might specify the database that will contain the tables during development or production.
    # For connector imports, if you leave this value empty, the value specified in the data connection is used.
    # This parameter is ignored if you are importing from multiple databases on IBM z/OS.
    # Required: if 'create_schema_from_pdm' is True
    database_name: ""
    # If you specify a value for the Database name parameter, choose one of the following options:
    #    Use database name to override bridge value. The database name that you specify replaces any value that is returned by the bridge.
    #    Use database name if bridge value is empty. The database name that you specify is used only if the bridge returns no database name.
    # If you override the bridge value and the import includes more than one database, the database name that you specify is used only to replace empty values. If you override the bridge value but you specify no value for database name, the bridge value is not changed.
    database_name_override_bridge: False
    # Select or type the name of the DBMS (database management system) that hosts or will host the database.
    # The DBMS name is part of the identity of the target database. You can specify a different DBMS than the one that hosts the source database. The DBMS name must be appropriate for the value that you entered in the Database name field on this screen.
    # Required: if 'create_schema_from_pdm' is True
    dbms_name: "DB2"                                # or "ACCESS" or "EXCEL" or "Informix" or "Microsoft SQL Server" or "Oracle" or "SQL Server" or "Teradata" or "Text" or "XML"
    # Options:
    #    True:  The DBMS name that you specify replaces any value that is returned by the bridge.
    #    False: Use DBMS name to replace empty bridge value. The DBMS name that you specify is used only if the bridge returns no DBMS name.
    # If you choose to override the bridge value and the import includes more than one DBMS, the DBMS name that you specify is used only to replace empty values. If you choose to override the bridge value but you specify no DBMS name, the bridge value is not changed.
    dbms_name_override_bridge: False
    # If applicable, type the name of the DBMS server instance that hosts or will host the database. Some database management systems do not have the concept of DBMS server instance.
    # DBMS server instance name is part of the identity of the target database. You can specify a different DBMS server instance name than the one that hosts the source database. The DBMS server instance name must be appropriate for the value that you entered in the Database name field on this screen.
    dbms_server_instance: ""
    # For imports from Business Intelligence (BI) tools and databases, type the name of the database schema or browse to select the schema that will contain the imported tables. This value is important for creating and reconciling the identity of the schema in the repository.
    schema_name: ""
